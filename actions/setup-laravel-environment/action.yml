name: 'Setup Base Laravel Environment'
description: 'Installs Composer and Node dependencies, builds assets, and runs PHPUnit tests.'

inputs:
  php-version:
    description: 'PHP version'
    required: true
  node-version:
    description: 'Node version'
    required: true
  db-port:
    description: 'Database port'
    required: true
  redis-port:
    description: 'Redis port'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        check-latest: true

    - name: Install Sentry CLI
      shell: bash
      run: curl -sL https://sentry.io/get-cli/ | bash

    - name: Cache NPM dependencies
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          ~/.npm
        key: ${{ runner.os }}-npm-${{ inputs.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-${{ inputs.node-version }}-

      # Docs: https://github.com/shivammathur/setup-php
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.php-version }}
        extensions: mbstring, dom, fileinfo, mysql
        coverage: xdebug

      # Local MySQL service in GitHub hosted environments is disabled by default.
      # If you are using it instead of service containers, make sure you start it.
      # - name: Start mysql service
      #   run: sudo systemctl start mysql.service

    - name: Get composer cache directory
      id: composer-cache
      shell: bash
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        # Use composer.json for key, if composer.lock is not committed.
        # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      shell: bash
      run: |
        composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Prepare the application
      shell: bash
      run: |
        php -r "file_exists('.env') || copy('.env.example', '.env');"
        php artisan key:generate

    - name: Clear Config
      shell: bash
      run: |
        php artisan config:clear

    - name: Run Migration
      shell: bash
      run: |
        php artisan migrate -v
      env:
        DB_PORT: ${{ inputs.db-port }}
        REDIS_PORT: ${{ inputs.redis-port }}

    - name: Install NPM Dependencies
      shell: bash
      run: |
        # npm ci # It's recommended to use `npm ci` in CI/CD systems for a clean package state
        npm install

    - name: Compile Assets
      shell: bash
      run: |
        npm run build

    - name: Test with phpunit
      shell: bash
      run: |
        vendor/bin/phpunit
      env:
        DB_PORT: ${{ inputs.db-port }}
        REDIS_PORT: ${{ inputs.redis-port }}
